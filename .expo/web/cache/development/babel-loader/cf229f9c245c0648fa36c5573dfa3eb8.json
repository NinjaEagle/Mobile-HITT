{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nrequire(\"react-native-gesture-handler\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _components = require(\"@ui-kitten/components\");\n\nvar _eva = require(\"@eva-design/eva\");\n\nvar _Login = _interopRequireDefault(require(\"./src/screens/Login\"));\n\nvar _Home = _interopRequireDefault(require(\"./src/screens/Home\"));\n\nvar _AppNavigator = _interopRequireDefault(require(\"./src/components/AppNavigator\"));\n\nvar _Exercise = _interopRequireDefault(require(\"./src/screens/Exercise\"));\n\nvar _jsxFileName = \"/Users/jerryvelazquez/Desktop/Mobile-HITT/App.js\";\n\nvar App = function App(props) {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      isLoggedin = _useState2[0],\n      setisLoggedin = _useState2[1];\n\n  console.log(props);\n  return _react.default.createElement(_components.ApplicationProvider, {\n    mapping: _eva.mapping,\n    theme: _eva.light,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }\n  }, _react.default.createElement(_AppNavigator.default, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 4\n    }\n  }));\n};\n\nvar _default = App;\nexports.default = _default;","map":{"version":3,"sources":["/Users/jerryvelazquez/Desktop/Mobile-HITT/App.js"],"names":["App","props","isLoggedin","setisLoggedin","console","log","mapping","lightTheme"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAW;AAAA,kBACc,qBAAS,KAAT,CADd;AAAA;AAAA,MACfC,UADe;AAAA,MACHC,aADG;;AAEtBC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,SACC,6BAAC,+BAAD;AAAqB,IAAA,OAAO,EAAEK,YAA9B;AAAuC,IAAA,KAAK,EAAEC,UAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,6BAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD;AAMA,CATD;;eAWeP,G","sourcesContent":["import 'react-native-gesture-handler'\nimport React, { useState } from 'react'\nimport { ApplicationProvider } from '@ui-kitten/components'\nimport { mapping, light as lightTheme } from '@eva-design/eva'\nimport Login from './src/screens/Login'\nimport Home from './src/screens/Home'\nimport AppNavigator from './src/components/AppNavigator'\nimport Exercise from './src/screens/Exercise'\n\nconst App = (props) => {\n\tconst [isLoggedin, setisLoggedin] = useState(false)\n\tconsole.log(props)\n\treturn (\n\t\t<ApplicationProvider mapping={mapping} theme={lightTheme}>\n\t\t\t<AppNavigator />\n\t\t\t{/* <Exercise /> */}\n\t\t</ApplicationProvider>\n\t)\n}\n\nexport default App\n\n// import 'react-native-gesture-handler'\n// import React, { useState } from 'react'\n// import { Platform, StatusBar, StyleSheet, View } from 'react-native'\n// import { SplashScreen } from 'expo'\n// import Login from './src/screens/Login'\n// import AppNavigator from './src/components/AppNavigator'\n// import { mapping, light as lightTheme } from '@eva-design/eva'\n// // import * as Font from 'expo-font'\n// // import { Ionicons } from '@expo/vector-icons'\n// import { NavigationContainer } from '@react-navigation/native'\n// import { AppRegistry } from 'react-native'\n\n// // import BottomTabNavigator from './src/components/BottomTabNavigator'\n// // import useLinking from './src/components/useLinking'\n// import {\n// \tApplicationProvider,\n// \tButton,\n// \tIcon,\n// \tIconRegistry,\n// \tLayout,\n// \tText,\n// } from '@ui-kitten/components'\n// import { EvaIconsPack } from '@ui-kitten/eva-icons'\n\n// // const Stack = createStackNavigator()\n\n// const App = (props) => {\n// \t// const [isLoadingComplete, setLoadingComplete] = React.useState(false)\n// \t// const [initialNavigationState, setInitialNavigationState] = React.useState()\n// \t// const containerRef = React.useRef()\n// \t// const { getInitialState } = useLinking(containerRef)\n\n// \tconst [isLoggedin, setisLoggedin] = useState(false)\n\n// \treturn (\n// \t\t<ErrorBoundary>\n// \t\t\t<ApplicationProvider mapping={mapping} theme={lightTheme}>\n// \t\t\t\t<AppNavigator />\n// \t\t\t</ApplicationProvider>\n// \t\t</ErrorBoundary>\n// \t\t// isLoggedin ? <AppNavigator /> : <Login signIn={setisLoggedin} />\n// \t\t// <View style={styles.container}>\n// \t\t// \t<NavigationContainer\n// \t\t// \t\tref={containerRef}\n// \t\t// \t\tinitialState={initialNavigationState}>\n// \t\t// \t\t<Stack.Navigator>\n// \t\t// \t\t\t<Stack.Screen name='Root' component={BottomTabNavigator} />\n// \t\t// \t\t</Stack.Navigator>\n// \t\t// \t</NavigationContainer>\n// \t\t// </View>\n// \t)\n// }\n// export default App\n\n// const styles = StyleSheet.create({\n// \tcontainer: {\n// \t\tflex: 1,\n// \t\tbackgroundColor: '#fff',\n// \t},\n// })\n\n// Load any resources or data that we need prior to rendering the app\n// React.useEffect(() => {\n// \tasync function loadResourcesAndDataAsync() {\n// \t\ttry {\n// \t\t\tSplashScreen.preventAutoHide()\n\n// \t\t\t// Load our initial navigation state\n// \t\t\tsetInitialNavigationState(await getInitialState())\n\n// \t\t\t// Load fonts\n// \t\t\t// await Font.loadAsync({\n// \t\t\t// \t...Ionicons.font,\n// \t\t\t// \t'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n// \t\t\t// })\n// \t\t} catch (e) {\n// \t\t\t// We might want to provide this error information to an error reporting service\n// \t\t\tconsole.warn(e)\n// \t\t} finally {\n// \t\t\tsetLoadingComplete(true)\n// \t\t\tSplashScreen.hide()\n// \t\t}\n// \t}\n\n// \tloadResourcesAndDataAsync()\n// }, [])\n\n// if (!isLoadingComplete && !props.skipLoadingScreen) {\n// \treturn null\n// } else {\n"]},"metadata":{},"sourceType":"script"}